import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { addWebsiteJsonLd } from '@starter-kit/utils/seo/enhancedJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { Waypoint } from 'react-waypoint';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Footer } from '../components/footer';
import { Layout } from '../components/layout';
import { Meta } from '../components/meta';
import { MinimalPosts } from '../components/minimal-posts';
import { PersonalHeader } from '../components/personal-theme-header';
import {
	MorePostsByPublicationDocument,
	MorePostsByPublicationQuery,
	MorePostsByPublicationQueryVariables,
	PageInfoFragment,
	PostFragment,
	PostsByPublicationDocument,
	PostsByPublicationQuery,
	PostsByPublicationQueryVariables,
	PublicationFragment,
} from '../generated/graphql';

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;

type Props = {
	publication: PublicationFragment;
	initialPosts: PostFragment[];
	initialPageInfo: PageInfoFragment;
};

export default function Index({ publication, initialPosts, initialPageInfo }: Props) {
	const [posts, setPosts] = useState<PostFragment[]>(initialPosts);
	const [pageInfo, setPageInfo] = useState<Props['initialPageInfo']>(initialPageInfo);
	const [loadedMore, setLoadedMore] = useState(false);

	const loadMore = async () => {
		const data = await request<MorePostsByPublicationQuery, MorePostsByPublicationQueryVariables>(
			GQL_ENDPOINT,
			MorePostsByPublicationDocument,
			{
				first: 20,
				host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
				after: pageInfo.endCursor,
			},
		);
		if (!data.publication) {
			return;
		}
		const newPosts = data.publication.posts.edges.map((edge) => edge.node);
		setPosts([...posts, ...newPosts]);
		setPageInfo(data.publication.posts.pageInfo);
		setLoadedMore(true);
	};
	
	// Enhanced meta information for homepage
	const homeDescription = publication.descriptionSEO || 
		publication.title || 
		`${publication.author.name}'s Blog - Thoughts, insights, and updates`;
	
	const homeImage = publication.ogMetaData?.image || 
		getAutogeneratedPublicationOG(publication);
	
	return (
		<AppProvider publication={publication}>
			<Layout>
				<Head>
					{/* Enhanced Schema markup */}
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addWebsiteJsonLd(publication)),
						}}
					/>
					<script
						type="application/ld+json"
						dangerouslySetInnerHTML={{
							__html: JSON.stringify(addPublicationJsonLd(publication)),
						}}
					/>
				</Head>
				
				{/* Enhanced Meta component */}
				<Meta
					title={publication.displayTitle || publication.title}
					description={homeDescription}
					image={homeImage}
					canonicalUrl={publication.url}
					type="website"
				/>
				
				<Container className="mx-auto flex max-w-3xl flex-col items-stretch gap-10 px-5 py-10">
					<PersonalHeader />
					
					<main itemScope itemType="https://schema.org/Blog">
						{/* Hidden schema properties */}
						<meta itemProp="name" content={publication.title} />
						<meta itemProp="description" content={homeDescription} />
						<meta itemProp="url" content={publication.url} />
						
						{posts.length > 0 && (
							<section>
								<h2 className="sr-only">Latest Posts</h2>
								<MinimalPosts context="home" posts={posts} />
							</section>
						)}
						
						{!loadedMore && pageInfo.hasNextPage && pageInfo.endCursor && (
							<button 
								onClick={loadMore}
								className="mx-auto block px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
								aria-label="Load more posts"
							>
								Load more posts
							</button>
						)}
						{loadedMore && pageInfo.hasNextPage && pageInfo.endCursor && (
							<Waypoint onEnter={loadMore} bottomOffset={'10%'} />
						)}
					</main>

					<Footer />
				</Container>
			</Layout>
		</AppProvider>
	);
}

export const getStaticProps: GetStaticProps<Props> = async () => {
	const data = await request<PostsByPublicationQuery, PostsByPublicationQueryVariables>(
		GQL_ENDPOINT,
		PostsByPublicationDocument,
		{
			first: 20,
			host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
		},
	);

	const publication = data.publication;
	if (!publication) {
		return {
			notFound: true,
		};
	}
	const initialPosts = (publication.posts.edges ?? []).map((edge) => edge.node);

	return {
		props: {
			publication,
			initialPosts,
			initialPageInfo: publication.posts.pageInfo,
		},
		revalidate: 1,
	};
};
